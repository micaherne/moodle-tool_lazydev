<?php

namespace tool_lazydev\local;

use core\persistent;

class xmldb_generator {

    public function tabledef_for_persistent(persistent $persistent) : \xmldb_table {

        $reflect = new \ReflectionClass($persistent);

        $table = $reflect->getConstant('TABLE');
        $propertiesdefinitionmethod = $reflect->getMethod('properties_definition');

        $propertiesdef = $propertiesdefinitionmethod->invoke(null);

        $result = new \xmldb_table($table);
        $result->setComment('Generated by lazydev');

        // Put id first as is convention.
        if (array_key_exists('id', $propertiesdef)) {
            $propertiesdef = ['id' => $propertiesdef['id']] + $propertiesdef;
        }

        foreach ($propertiesdef as $propname => $propdef) {
            // Default params.
            $params = [
                'name' => $propname,
                'type' => XMLDB_TYPE_CHAR,
                'precision' => null,
                'unsigned' => null,
                'notnull' => null,
                'sequence' => $propname == 'id',
                'default' => null
            ];

            foreach ($propdef as $feature => $value) {
                if ($feature == 'type') {
                    $details = $this->infer_column_details($value);
                    $params = array_merge($params, $details); // Later keys overwrite.
                } else if ($feature == 'null') {
                    $params['notnull'] = !$value ? 'TRUE' : 'FALSE';
                } else if ($feature == 'default') {
                    $params['default'] = $value;
                } else if ($feature == 'message' || $feature == 'choices') {
                    // These are allowed, but we don't need to do anything with them.
                } else {
                    debugging('Unknown property attribute ' . $feature);
                    continue;
                }
            }

            $result->add_field($params['name'], $params['type'], $params['precision'], $params['unsigned'],
                $params['notnull'], $params['sequence'], $params['default']);
        }

        return $result;
    }

    public function infer_column_details(string $paramconstant) : array {
        $result = [];
        switch ($paramconstant) {
            case PARAM_INT:
            case PARAM_INTEGER:
                $result['type'] = XMLDB_TYPE_INTEGER;
                $result['precision'] = 10;
                break;
            case PARAM_FLOAT:
            case PARAM_NUMBER:
                $result['type'] = XMLDB_TYPE_NUMBER;
                $result['precision'] = 10;
            default:
                $result['type'] = XMLDB_TYPE_CHAR;
                $result['precision'] = 255;
        }
        return $result;
    }

}